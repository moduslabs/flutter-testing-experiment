// Mocks generated by Mockito 5.0.16 from annotations
// in flutter_testing_experiment/test/task_details_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:flutter/material.dart' as _i5;
import 'package:flutter_testing_experiment/src/core/data/task.dart' as _i2;
import 'package:flutter_testing_experiment/src/core/models/task_view_model.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTask_0 extends _i1.Fake implements _i2.Task {}

/// A class which mocks [TaskViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskViewModel extends _i1.Mock implements _i3.TaskViewModel {
  MockTaskViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.Future<List<_i2.Task>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<List<_i2.Task>>.value(<_i2.Task>[]))
          as _i4.Future<List<_i2.Task>>);
  @override
  _i4.Future<List<_i2.Task>> getPending() =>
      (super.noSuchMethod(Invocation.method(#getPending, []),
              returnValue: Future<List<_i2.Task>>.value(<_i2.Task>[]))
          as _i4.Future<List<_i2.Task>>);
  @override
  _i4.Future<_i2.Task> saveOrUpdate(_i2.Task? task) =>
      (super.noSuchMethod(Invocation.method(#saveOrUpdate, [task]),
              returnValue: Future<_i2.Task>.value(_FakeTask_0()))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<void> setAsDone(_i2.Task? task) =>
      (super.noSuchMethod(Invocation.method(#setAsDone, [task]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> remove(_i2.Task? task) =>
      (super.noSuchMethod(Invocation.method(#remove, [task]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> openTask(_i5.BuildContext? context, _i2.Task? task) =>
      (super.noSuchMethod(Invocation.method(#openTask, [context, task]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
